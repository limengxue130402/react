{"version":3,"sources":["showTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["React","Component","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","bind","state","a","b","c","console","log","this","refs","focus","ref","onChange","onKeyDown","type","parseInt","inp","onClick","Todoing","delItem","todo","map","item","idx","key","del","defaultProps","Todolist","addItem","data","splice","ReactDOM","render","document","getElementById"],"mappings":"iPACuBA,IAAMC,U,2BCORC,E,YACjB,aAAe,IAAD,8BACV,+CAQJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAZlB,EAgBdC,aAAe,SAACN,GACZ,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAOR,EAAEI,OAAOC,SAhB9B,EAAKN,YAAc,EAAKA,YAAYU,KAAjB,gBACnB,EAAKC,MAAQ,CACTC,EAAG,GACHC,EAAG,GACHC,EAAG,IANG,E,iFAsBVC,QAAQC,IAAIC,KAAKC,KAAKN,GACtBK,KAAKC,KAAKN,EAAEO,U,+BAEN,IAAD,OACL,OACI,6BACI,2BAAOC,IAAI,IAAId,MAAOW,KAAKN,MAAMC,EAAGS,SAAUJ,KAAKV,aAAce,UAAWL,KAAKjB,YAAauB,KAAK,SADvG,IAGI,2BAAOd,KAAK,IAAIH,MAAOW,KAAKN,MAAME,EAAGQ,SAAUJ,KAAKV,aAAce,UAAWL,KAAKjB,YAAauB,KAAK,SAHxG,IAKI,2BAAOd,KAAK,IAAIH,MAAOW,KAAKN,MAAMG,EAAGO,SAAUJ,KAAKV,aAAce,UAAWL,KAAKjB,YAAauB,KAAK,SALxG,IAOI,2BAAIC,SAAwB,KAAfP,KAAKN,MAAMC,EAAO,EAAEK,KAAKN,MAAMC,GAAGY,SAAwB,KAAfP,KAAKN,MAAME,EAAO,EAAEI,KAAKN,MAAME,GAAGW,SAAwB,KAAfP,KAAKN,MAAMG,EAAO,EAAEG,KAAKN,MAAMG,IAElI,2BAAOM,IAAK,SAACK,GAAO,EAAKA,IAAIA,GAAMF,KAAK,SACxC,4BAAQG,QAAS,WAAKX,QAAQC,IAAI,EAAKS,OAAvC,qB,GAtCuB3B,aCLlB6B,E,2MACjBC,QAAU,a,wEAGA,IAAD,OACAC,EAAQZ,KAAKd,MAAb0B,KACL,OACI,6BACI,4BAEQA,EAAKC,KAAI,SAACC,EAAMC,GAAP,OACL,wBAAIC,IAAKD,GACJD,EADL,MACa,4BAAQL,QAAS,kBAAM,EAAKvB,MAAM+B,IAAIF,KAAtC,0B,GAZJlC,aA2BrC6B,EAAQQ,aAAe,CACnBN,KAAM,CAAC,EAAE,EAAE,EAAE,I,IC3BIO,E,YACjB,aAAe,IAAD,8BACV,+CAsBJC,QAAU,SAACC,GACP,EAAK9B,SAAS,CACVqB,KAAK,GAAD,mBAAM,EAAKlB,MAAMkB,MAAjB,CAAuBS,OAzBrB,EA8BdV,QAAU,SAACI,EAAK/B,GACZc,QAAQC,IAAIgB,GAEZ,IAAIH,EAAI,YAAO,EAAKlB,MAAMkB,MAC1BA,EAAKU,OAAOP,EAAK,GAEjB,EAAKxB,UAAS,SAACG,EAAOR,GAElB,OADAY,QAAQC,IAAI,EAAKL,MAAMkB,MAChB,CACHA,KAAKA,OArCb,EAAKlB,MAAQ,CACTkB,KAAM,CAAC,EAAG,EAAG,GACbjB,EAAG,IACHC,EAAG,KALG,E,sEAoDV,OACI,6BACI,kBAAC,EAAD,CAAWT,IAAKa,KAAKoB,UACrB,kBAAC,EAAD,CAASR,KAAMZ,KAAKN,MAAMkB,KAAMK,IAAKjB,KAAKW,e,GAxDpB9B,aCQtC0C,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,W","file":"static/js/main.a1c6065e.chunk.js","sourcesContent":["import React, {Fragment, Component} from 'react'\r\nclass ShowTime extends React.Component{\r\n    //声明状态\r\n    constructor(props) {\r\n        super(props);//必须有，没有下边会报错\r\n        this.state = {\r\n            time: new Date().toLocaleString(),\r\n            a: 100,\r\n            b: 200\r\n        }\r\n        console.log('constructor');\r\n        setTimeout(() => {\r\n            this.setState({\r\n                time: new Date().toLocaleString(),\r\n            })\r\n        },1000);\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        if(this.state.a > 10) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(preProps, preState, data) {\r\n        console.log(data);\r\n        console.log('didupdate');\r\n        console.log(preProps, preState);\r\n    }\r\n    getSnapshotBeforeUpdate() {\r\n        console.log('getSnapshot');\r\n        return {name:this.state.a};\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('didmount');\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log('render');\r\n        var {name, age} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {/* 条件渲染 */}\r\n                {name.length > 5 ? <div>姓名：{name}</div> : ''}\r\n                {name.length > 5 && <div>年龄：{age}</div>}\r\n                <div>时间：{this.state.time}</div>                \r\n\r\n                {/* 循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item, index) => {\r\n                            if(index % 2 ===0) {\r\n                                return <p key={item}>{item}</p>\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n            )\r\n    }\r\n}\r\n\r\n//默认导出，只能默认导出一次\r\n//被引入是可以重命名\r\nexport default ShowTime;\r\n\r\n//命名导出，可以导出多个\r\n//被引入时与导出的名一致\r\n// export {ShowTime};\r\n// export const num = 100;\r\n// export const num = 200;\r\n// export const num = 300;\r\n// export const num = 400;\r\n","import React, { Component } from 'react'\r\n\r\n//受控组件：value值被react控制的表单元素\r\n//1、给input标签添加value属性，赋值为state的值\r\n//2、给input标签绑定onChange事件，\r\n//在事件处理函数中setState\r\n//3、\r\n//可以实时获取表单元素的值（表单验证）\r\nexport default class Todoinput extends Component {\r\n    constructor() {\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            a: '',\r\n            b: '',\r\n            c: ''\r\n        }\r\n    }\r\n    handleInput = (e) => {\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){//13代表键盘的回车\r\n            this.props.add(e.target.value);\r\n        }\r\n        \r\n    }\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        console.log(this.refs.a)\r\n        this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref=\"a\" value={this.state.a} onChange={this.handleChange} onKeyDown={this.handleInput} type='text'></input>\r\n                +\r\n                <input name=\"b\" value={this.state.b} onChange={this.handleChange} onKeyDown={this.handleInput} type='text'></input>\r\n                +\r\n                <input name=\"c\" value={this.state.c} onChange={this.handleChange} onKeyDown={this.handleInput} type='text'></input>\r\n                =\r\n                <p>{parseInt(this.state.a===''?0:this.state.a)+parseInt(this.state.b===''?0:this.state.b)+parseInt(this.state.c===''?0:this.state.c)}</p>\r\n                {/* 非受控组件:一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"></input>\r\n                <button onClick={()=>{console.log(this.inp)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n    delItem = () => {\r\n\r\n    }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        todo.map((item, idx) => \r\n                            <li key={idx}>\r\n                                {item}---<button onClick={() => this.props.del(idx)}>删除</button>\r\n                            </li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoing.propTypes = {\r\n    todo: PropTypes.array,\r\n    del: PropTypes.func\r\n}\r\n\r\n//设置默认的属性值，不需要引入包\r\nTodoing.defaultProps = {\r\n    todo: [1,2,3,4]\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            todo: [1, 2, 3],\r\n            a: 100,\r\n            b: 200\r\n        }\r\n\r\n        //深拷贝、浅拷贝\r\n        // var obj = {a: 100, b: [1, 2, 3]};\r\n        // var obj1 = {c: 300};\r\n        // var o = {...obj};\r\n        // var o = Object.assign({}, obj, obj1);\r\n        // 深拷贝\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.b[0] = 200;\r\n        // console.log(o===obj);\r\n        // 遍历对象\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item)\r\n        //     console.log(obj[item])\r\n        // })\r\n    }\r\n    addItem = (data) => {\r\n        this.setState({\r\n            todo: [...this.state.todo, data]\r\n        })        \r\n    }\r\n\r\n\r\n    delItem = (idx, e) => {\r\n        console.log(idx);\r\n         // 1、不能直接改变或处理state，通过setState改变\r\n        let todo = [...this.state.todo];//相当于一个拷贝，操作todo不改变this.todo \r\n        todo.splice(idx, 1);\r\n        // 2、setState是异步执行\r\n        this.setState((state, props) => {\r\n            console.log(this.state.todo);\r\n            return {\r\n                todo:todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo: this.state.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo)\r\n        // })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing todo={this.state.todo} del={this.delItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport ShowTime from './showTime';\n// import {ShowTime} from './showTime';命名导出\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n\n\n//组件交互\n//父组件----->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n//子组件----->父组件：\n\nReactDOM.render(<Todolist/>, document.getElementById('root'));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//显示当前系统时间\n// function showTime() {\n//     var ele = <div>{new Date().toLocaleString()}</div>;\n//     ReactDOM.render(\n//         ele, \n//         document.querySelector('#root')\n//     );\n// }\n// showTime();\n// setInterval(showTime, 1000);\n\n//函数声明组件\n//组件名字开头大写\n// function ShowTime(props) {\n//     console.log(props);\n//      /*只能有一个div*/\n//     return (<Fragment> \n//                 <div>\n//                     {props.name} {props.age}\n//                 </div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//             )\n// }\n\n\n//类定义一个组件\n// class ShowTime extends React.Component{\n//     //声明状态\n//     constructor(props) {\n//         super(props);//必须有，没有下边会报错\n//         this.state = {\n//             time: new Date().toLocaleString(),\n//             a: 100,\n//             b: 200\n//         }\n//         console.log('constructor');\n//         setTimeout(() => {\n//             this.setState({\n//                 time: new Date().toLocaleString(),\n//             })\n//         },1000);\n//     }\n\n//     shouldComponentUpdate() {\n//         if(this.state.a > 10) {\n//             return true;\n//         }\n//         else {\n//             return false;\n//         }\n//     }\n\n//     componentDidUpdate(preProps, preState, data) {\n//         console.log(data);\n//         console.log('didupdate');\n//         console.log(preProps, preState);\n//     }\n//     getSnapshotBeforeUpdate() {\n//         console.log('getSnapshot');\n//         return {name:this.state.a};\n//     }\n\n//     componentDidMount() {\n//         console.log('didmount');\n//     }\n\n\n//     render() {\n//         console.log('render');\n//         var {name, age} = this.props;\n//         return (\n//             <Fragment>\n//                 {/* 条件渲染 */}\n//                 {name.length > 5 ? <div>姓名：{name}</div> : ''}\n//                 {name.length > 5 && <div>年龄：{age}</div>}\n//                 <div>时间：{this.state.time}</div>                \n\n//                 {/* 循环渲染 */}\n//                 <div>\n//                     {\n//                         age.map((item, index) => {\n//                             if(index % 2 ===0) {\n//                                 return <p key={item}>{item}</p>\n//                             }\n//                         })\n//                     }\n//                 </div>\n//             </Fragment>\n//             )\n//     }\n// }\n\n\n// var num = [1, 2, 3];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>, \n//     document.getElementById('root')\n// );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// react技术栈\n// jsx语法\n\n// var str = 'react';\n// var ele = <h1 class=\"tut\">hello {str} </h1>;\n\n// var ele = React.createElement('h1', {id: 'tit', class: 'title'});\n// console.log(ele);\n\n// ReactDOM.render(ele, document.getElementById('root'));\n\n// 自己封装render函数\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: ['hello',' ', 'react',\n            {type: 'h1',\n             props: {\n             id: 'tit',\n             class: 'tit',\n             children: ['hello',' ', 'title']\n             }\n            }\n        ]\n    }\n}\n\n\nfunction render(obj, container) {\n    var {type,props} = obj;\n    //文档碎片\n    var fragment = document.createDocumentFragment();\n    var ele = document.createElement(obj.type);\n    for(var item in props) {\n        if(item === 'class') {\n            ele.className = props[item];\n        }else if(item === 'children'){\n            for(var i = 0; i < props.children.length; i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object') {\n                    render(props.children[i], ele);\n                }else {\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else {\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n\n\n\n//render(obj,document.getElementById('root'));\n\n//页面渲染过程\n//请求HTML页面。浏览器HTML解析器解析html文件、生成DOM树\n//link引入css文件、css解析器解析css文件，生成css对象模型，\n// cssOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\n\n\n//页面回流（重排reflow）:DOM结构变化、内容变化、大小、位置的变化、显示（隐藏）的变化\n//页面重绘（repaint）:颜色的变化（背景色、字体颜色、边框颜色）\n\n//1、先用变量进行DOM处理，最后一次渲染\n// console.time('time');\n// var div = document.getElementById('root');\n// var str = '';\n// for(var i = 0; i < 1000; i++) {\n//     str += '<p>' + i + '</p>';\n// };\n// div.innerHTML = str;\n// console.timeEnd('time');\n\n//2、对于样式处理\n// var div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\n\n// var div = document.getElementById('root');\n// div.className = 'active';\n\n//3、offsetLeft、offsetWidth等都会引起回流,要慎用\n// var div = document.getElementById('root');\n// div.className = 'active';\n// var wid = div.offsetWidth;\n// console.log(div.offsetLeft);\n// setInterval(() => {\n//     wid += 1;\n//     div.style.width = wid + 'px';\n// },100)\n\n\n//4、"],"sourceRoot":""}